{"version":3,"file":"js/login.01c0ee7c.js","mappings":"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","sources":["webpack://kadi-tidi/./src/locales/en.js","webpack://kadi-tidi/./src/utils/composables/validation.js","webpack://kadi-tidi/./src/pages/auth/login/Login.vue","webpack://kadi-tidi/./src/pages/auth/login/Login.vue?50a2","webpack://kadi-tidi/./src/pages/auth/signup/Signup.vue","webpack://kadi-tidi/./src/pages/auth/signup/Signup.vue?2d04"],"sourcesContent":["export const en = {\r\n    generalErrorMessage: {\r\n        fieldIsRequired: 'field is required',\r\n    },\r\n    //Login Process Messages\r\n    authErrorMessage: {\r\n        emailError: 'The email field must be a valid email',\r\n        passwordValid: 'The password field must be at least 8 characters',\r\n        validPassRegex:'Passwords must be at least 8 characters long, and contain at least 1 alphabet,1 uppercase, 1 numeric, and 1 special character',\r\n        confirmPasswordValid: 'The confirm password confirmation does not match',\r\n        validCharacters: 'The first name field may only contain alphabetic characters as well as spaces',\r\n        minMust: 'must be at least 3 characters',\r\n    },\r\n    //Create Company Process Messages\r\n    companyErrorMessage: {\r\n        phoneNumberValid:'The phone number field must be at least 10 characters'\r\n    },\r\n    email: 'Email',\r\n    password: 'Password',\r\n    firstName:'first name',\r\n    lastName:'last name',\r\n    phoneNumber:'phone number',\r\n}","import { nextTick } from \"vue\";\r\nimport { en } from \"@/locales\";\r\n\r\nexport function useValidation() {\r\n    function checkErrors({field = {}, name = \"\", validations = '', type = \"string\", event = null}) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                let rules = validations!== '' ? validations.split(\"|\").map((x) => x.trim()) : '';\r\n                let valid = true;\r\n                let typeMsg = type === \"number\" ? \"digits\" : \"characters\";\r\n\r\n                if(rules.length) {\r\n                    // REQUIRED\r\n                    if (rules.filter((x) => x.includes(\"required\")).length) {\r\n                        if(event !== null){\r\n                            if (event.target.value.trim() === \"\" || event.target.value.trim() === null || event.target.value === false) {\r\n                                valid = false;\r\n                                field.error = `The ${name.toLowerCase()} ${en.generalErrorMessage.fieldIsRequired}`;\r\n                            }\r\n                        } else {\r\n                            if (field.value === \"\" || field.value === null || field.value === false) {\r\n                                valid = false;\r\n                                field.error = `The ${name.toLowerCase()} ${en.generalErrorMessage.fieldIsRequired}`;\r\n                            }\r\n                        }\r\n                    }\r\n                    // REGEX\r\n                    if (rules.filter((x) => x.includes(\"regex\")).length && valid) {\r\n                        let ind = rules.findIndex((x) => x.includes(\"regex\"));\r\n                        if (ind !== -1) {\r\n                            let regex = rules[ind].split(\":\").pop().trim() || \"\";\r\n                            if (regex.length) {\r\n                                regex = new RegExp(regex);\r\n                                if(event !== null) {\r\n                                    if (!regex.test(event.target.value.trim())) {\r\n                                        valid = false;\r\n                                        field.error =\r\n                                            name == en.password && field.value.toString().length < 8\r\n                                            ? en.authErrorMessage.passwordValid\r\n                                            : name == en.password && field.value.toString().length >= 8\r\n                                            ? en.authErrorMessage.validPassRegex\r\n                                            : name == en.email\r\n                                            ? en.authErrorMessage.emailError\r\n                                            : name == en.firstName || name == en.lastName\r\n                                            ? en.authErrorMessage.validCharacters\r\n                                            : `The ${name.toLowerCase()} field must be a valid ${name.toLowerCase()}`;\r\n                                    }\r\n                                }else {\r\n                                    if (!regex.test(field.value)) {\r\n                                        valid = false;\r\n                                        field.error =\r\n                                            name == en.password && field.value.toString().length < 8\r\n                                            ? en.authErrorMessage.passwordValid\r\n                                            : name == en.password && field.value.toString().length >= 8\r\n                                            ? en.authErrorMessage.validPassRegex\r\n                                            : name == en.email\r\n                                            ? en.authErrorMessage.emailError\r\n                                            : name == en.firstName || name == en.lastName\r\n                                            ? en.authErrorMessage.validCharacters\r\n                                            : `The ${name.toLowerCase()} field must be a valid ${name.toLowerCase()}`;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                console.warn(\"No regex found!\");\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // MIN\r\n                    if (rules.filter((x) => x.includes(\"min\")).length && valid) {\r\n                        let ind = rules.findIndex((x) => x.includes(\"min\"));\r\n                        if (ind !== -1) {\r\n                            let min = Number(rules[ind].split(\":\").pop());\r\n                            if(event !== null){\r\n                                if (event.target.value.trim().toString().length < min) {\r\n                                    valid = false;\r\n                                    field.error = \r\n                                    name === en.phoneNumber\r\n                                    ? en.companyErrorMessage.phoneNumberValid\r\n                                    :`The ${name.toLowerCase()} field must be at least ${min} ${typeMsg}`\r\n                                }\r\n                            }else {\r\n                                if (field.value.toString().length < min) {\r\n                                    valid = false;\r\n                                    field.error = \r\n                                    name === en.phoneNumber\r\n                                    ? en.companyErrorMessage.phoneNumberValid\r\n                                    :`The ${name.toLowerCase()} field must be at least ${min} ${typeMsg}`\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    // MAX\r\n                    if (rules.filter((x) => x.includes(\"max\")).length && valid) {\r\n                        let ind = rules.findIndex((x) => x.includes(\"max\"));\r\n                        if (ind !== -1) {\r\n                            let max = Number(rules[ind].split(\":\").pop());\r\n                            if(event !== null){\r\n                                if (event.target.value.trim().toString().length > max) {\r\n                                    valid = false;\r\n                                    field.error = `${name} must be less than ${max} ${typeMsg}`;\r\n                                }\r\n                            } else {\r\n                                if (field.value.toString().length > max) {\r\n                                    valid = false;\r\n                                    field.error = `${name} must be less than ${max} ${typeMsg}`;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    // CONFIRMATION\r\n                    if (rules.filter((x) => x.includes(\"confirmation\")).length && valid) {\r\n                        let ind = rules.findIndex((x) => x.includes(\"confirmation\"));\r\n                        if (ind !== -1) {\r\n                            let confirm = rules[ind].split(\":\").pop().trim() || \"\";\r\n                            if (confirm.length) {\r\n                                if(event !== null){\r\n                                    if (event.target.value.trim() !== confirm) {\r\n                                        valid = false;\r\n                                        field.error = `${en.authErrorMessage.confirmPasswordValid}`;\r\n                                    }\r\n                                } else {\r\n                                    if (field.value !== confirm) {\r\n                                        valid = false;\r\n                                        field.error = `${en.authErrorMessage.confirmPasswordValid}`;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                console.warn(\"No confirmation field found!\");\r\n                            }\r\n                        }\r\n                    }   \r\n\r\n                    // NO ERRORS\r\n                    if (valid) {\r\n                        field.error = \"\";\r\n                    }\r\n                }\r\n                resolve(valid);\r\n            } catch (error) {\r\n                reject(error)\r\n            }\r\n        })\r\n    }\r\n\r\n    function checkAllFields(formData) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                let valid = true;\r\n                Object.keys(formData).forEach((key) => {\r\n                    checkErrors({'field':formData[key],'name':formData[key].name,'validations':formData[key].rules,'type':formData[key].type}).then((res) => {\r\n                        if(res === false) {\r\n                            valid = false;\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(\"ERROR in check validation: \", error);\r\n                    })\r\n                });\r\n                nextTick(() => {\r\n                    resolve(valid);\r\n                })\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    return {\r\n        checkAllFields,\r\n        checkErrors\r\n    }\r\n}","<template>\r\n    <div style=\"height: 100%; width: 100%\" class=\"d-flex align-items-center justify-content-center flex-column\">\r\n        <div class=\"mb-30px d-flex flex-column position-re\">\r\n            <label for=\"\">Email</label>\r\n            <input\r\n                type=\"email\"\r\n                v-model=\"formData.email.value\"\r\n                placeholder=\"Enter email\"\r\n                class=\"form-control\"\r\n                style=\"width: 250px;\"\r\n                @keyup=\"checkErrors({\r\n                    'field': formData.email,\r\n                    'name': formData.email.name,\r\n                    'validations': formData.email.rules,\r\n                    'type': formData.email.type,\r\n                    'event': $event\r\n                })\"\r\n            >\r\n            <span class=\"invalid-feedback red\" v-if=\"formData.email.error\">{{formData.email.error}}</span>\r\n        </div>\r\n        <div class=\"mb-30px d-flex flex-column position-re\">\r\n            <label for=\"\">Password</label>\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"Enter password\"\r\n                v-model=\"formData.password.value\"\r\n                class=\"form-control\"\r\n                style=\"width: 250px;\"\r\n                @keyup=\"checkErrors({\r\n                    'field': formData.password,\r\n                    'name': formData.password.name,\r\n                    'validations': formData.password.rules,\r\n                    'type': formData.password.type,\r\n                    'event': $event\r\n                })\"\r\n            >\r\n            <span class=\"invalid-feedback red\" v-if=\"formData.password.error\">{{formData.password.error}}</span>\r\n        </div>\r\n\r\n        <button class=\"btn btn-primary\" @click=\"login()\">\r\n            Login\r\n        </button>\r\n\r\n        <router-link to=\"/signup\" class=\"mt-1\">Signup</router-link>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\n// PACKAGES\r\nimport { useValidation } from \"@/utils/composables/validation\";\r\nimport { App, Credentials } from \"realm-web\";\r\nimport { defineComponent, ref } from \"vue\";\r\nimport { useRoute, useRouter } from \"vue-router\";\r\nimport { useToast } from \"vue-toast-notification\";\r\n\r\n// HELPERS\r\nconst app = new App({ id: process.env.VUE_APP_MONGO_APP_ID });\r\nconst router = useRouter();\r\nconst route = useRoute();\r\nconst {checkAllFields, checkErrors} = useValidation();\r\nconst $toast = useToast();\r\n\r\ndefineComponent({\r\n    name: \"Login-Component\"\r\n})\r\n\r\nconst formData = ref({\r\n    email: {\r\n        value: \"\",\r\n        rules: \"required | regex: \\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{2,3})+\",\r\n        name: \"email\",\r\n        error: \"\",\r\n    },\r\n    password: {\r\n        value: \"\",\r\n        rules: \"required | regex: ^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).*$ | min:8\",\r\n        name: \"password\",\r\n        error: \"\",\r\n    }\r\n});\r\n\r\nfunction login() {\r\n    checkAllFields(formData.value)\r\n    .then((valid) => {\r\n        if(valid) {\r\n            const credentials = Credentials.emailPassword(formData.value.email.value, formData.value.password.value);\r\n            app.logIn(credentials).then(async() => {\r\n                if(route.query.redirect_url && route.query.redirect_url !== '/login') {\r\n                    router.replace(route.query.redirect_url).then(()=>{\r\n                        window.location.reload();\r\n                    });\r\n                } else {\r\n                    window.location.reload();\r\n                    router.push({name: 'Home'})\r\n                }\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                if (error.error == 'invalid username/password') {\r\n                    $toast.error(\"Invalid username or password.\",{position: 'top-right'})\r\n                } else {\r\n                    $toast.error(`${error.error}`,{position: 'top-right'})\r\n                }\r\n                console.error(\"ERROR in login: \", error);\r\n            })\r\n        }\r\n    })\r\n    .catch((error) => {\r\n        console.error(\"ERROR: \", error);\r\n    })\r\n}\r\n</script>\r\n\r\n<style lang=\"css\" scoped>\r\n\r\n</style>","import script from \"./Login.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Login.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n    <div style=\"height: 100%; width: 100%\" class=\"d-flex align-items-center justify-content-center flex-column\">\r\n        <div class=\"mb-30px d-flex flex-column position-re\">\r\n            <label for=\"\">Email</label>\r\n            <input \r\n                type=\"email\"\r\n                v-model=\"formData.email.value\"\r\n                placeholder=\"Enter email\"\r\n                class=\"form-control\"\r\n                style=\"width: 250px;\"\r\n                @keyup=\"checkErrors({\r\n                    'field': formData.email,\r\n                    'name': formData.email.name,\r\n                    'validations': formData.email.rules,\r\n                    'type': formData.email.type,\r\n                    'event': $event\r\n                })\"\r\n            >\r\n            <span class=\"invalid-feedback red\" v-if=\"formData.email.error\">{{formData.email.error}}</span>\r\n        </div>\r\n        <div class=\"mb-30px d-flex flex-column position-re\">\r\n            <label for=\"\">Username</label>\r\n            <input \r\n                type=\"text\"\r\n                v-model.trim=\"formData.userName.value\"\r\n                class=\"form-control\"\r\n                placeholder=\"Enter username\"\r\n                style=\"width: 250px;\"\r\n                @keyup=\"checkErrors({\r\n                    'field': formData.userName,\r\n                    'name': formData.userName.name,\r\n                    'validations': formData.userName.rules,\r\n                    'type': formData.userName.type,\r\n                    'event': $event\r\n                })\"\r\n            >\r\n            <span class=\"invalid-feedback red\" v-if=\"formData.userName.error\">{{formData.userName.error}}</span>\r\n        </div>\r\n        <div class=\"mb-30px d-flex flex-column position-re\">\r\n            <label for=\"\">Full name</label>\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Enter full name\"\r\n                v-model=\"formData.name.value\"\r\n                class=\"form-control\"\r\n                style=\"width: 250px;\"\r\n                @keyup=\"checkErrors({\r\n                    'field': formData.name,\r\n                    'name': formData.name.name,\r\n                    'validations': formData.name.rules,\r\n                    'type': formData.name.type,\r\n                    'event': $event\r\n                })\"\r\n            >\r\n            <span class=\"invalid-feedback red\" v-if=\"formData.name.error\">{{formData.name.error}}</span>\r\n        </div>\r\n        <div class=\"mb-30px d-flex flex-column position-re\">\r\n            <label for=\"\">Country</label>\r\n            <input \r\n                type=\"text\"\r\n                v-model=\"formData.country.value\"\r\n                class=\"form-control\"\r\n                style=\"width: 250px;\"\r\n                placeholder=\"Enter country\"\r\n                @keyup=\"checkErrors({\r\n                    'field': formData.country,\r\n                    'name': formData.country.name,\r\n                    'validations': formData.country.rules,\r\n                    'type': formData.country.type,\r\n                    'event': $event\r\n                })\"\r\n            >\r\n            <span class=\"invalid-feedback red\" v-if=\"formData.country.error\">{{formData.country.error}}</span>\r\n        </div>\r\n        <div class=\"mb-30px d-flex flex-column position-re\">\r\n            <label for=\"\">State</label>\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Enter state\"\r\n                v-model=\"formData.state.value\"\r\n                class=\"form-control\"\r\n                style=\"width: 250px;\"\r\n                @keyup=\"checkErrors({\r\n                    'field': formData.state,\r\n                    'name': formData.state.name,\r\n                    'validations': formData.state.rules,\r\n                    'type': formData.state.type,\r\n                    'event': $event\r\n                })\"\r\n            >\r\n            <span class=\"invalid-feedback red\" v-if=\"formData.state.error\">{{formData.state.error}}</span>\r\n        </div>\r\n        <div class=\"mb-30px d-flex flex-column position-re\">\r\n            <label for=\"\">City</label>\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Enter city\"\r\n                v-model=\"formData.city.value\"\r\n                class=\"form-control\"\r\n                style=\"width: 250px;\"\r\n                @keyup=\"checkErrors({\r\n                    'field': formData.city,\r\n                    'name': formData.city.name,\r\n                    'validations': formData.city.rules,\r\n                    'type': formData.city.type,\r\n                    'event': $event\r\n                })\"\r\n            >\r\n            <span class=\"invalid-feedback red\" v-if=\"formData.city.error\">{{formData.city.error}}</span>\r\n        </div>\r\n        <div class=\"mb-30px d-flex flex-column position-re\">\r\n            <label for=\"\">Password</label>\r\n            <input \r\n                type=\"password\"\r\n                placeholder=\"Enter password\"\r\n                v-model=\"formData.password.value\"\r\n                class=\"form-control\"\r\n                style=\"width: 250px;\"\r\n                @keyup=\"checkErrors({\r\n                    'field': formData.password,\r\n                    'name': formData.password.name,\r\n                    'validations': formData.password.rules,\r\n                    'type': formData.password.type,\r\n                    'event': $event\r\n                }), updateConfirmation()\"\r\n            >\r\n            <span class=\"invalid-feedback red\" v-if=\"formData.password.error\">{{formData.password.error}}</span>\r\n        </div>\r\n        <div class=\"mb-30px d-flex flex-column position-re\">\r\n            <label for=\"\">Confirm password</label>\r\n            <input \r\n                type=\"password\"\r\n                placeholder=\"Enter confirm password\"\r\n                v-model=\"formData.confirmPassword.value\"\r\n                class=\"form-control\"\r\n                style=\"width: 250px;\"\r\n                @keyup=\"checkErrors({\r\n                    'field': formData.confirmPassword,\r\n                    'name': formData.confirmPassword.name,\r\n                    'validations': formData.confirmPassword.rules,\r\n                    'type': formData.confirmPassword.type,\r\n                    'event': $event\r\n                }), confirmationPassValidation()\"\r\n            >\r\n            <span class=\"invalid-feedback red\" v-if=\"formData.confirmPassword.error || confirmationErr\">{{formData.confirmPassword.error || confirmationErr}}</span>\r\n        </div>\r\n\r\n        <button class=\"btn btn-primary\" @click=\"signup()\">\r\n            Signup\r\n        </button>\r\n\r\n        <router-link to=\"/\" class=\"mt-1\">Login</router-link>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { defineComponent, ref } from \"vue\";\r\nimport { CREATE_USER } from \"@/config/env\";\r\nimport { useValidation } from \"@/utils/composables/validation\";\r\nimport { apiRequest } from \"@/config/axios\";\r\nimport { useRouter } from \"vue-router\";\r\nimport { useToast } from \"vue-toast-notification\";\r\n\r\ndefineComponent({\r\n    name: \"Signup-Component\"\r\n})\r\n\r\n// HELPERS\r\nconst {checkErrors, checkAllFields} = useValidation();\r\nconst router = useRouter()\r\nconst $toast = useToast();\r\n\r\nconst formData = ref({\r\n    email: {\r\n        value: \"\",\r\n        rules: \"required | regex: \\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{2,3})+\",\r\n        name: \"email\",\r\n        error: \"\",\r\n    },\r\n    userName: {\r\n        value: \"\",\r\n        rules: \"required | regex: ^[A-Za-z0-9]*$\",\r\n        name: \"username\",\r\n        error: \"\",\r\n    },\r\n    name: {\r\n        value: \"\",\r\n        rules: \"required\",\r\n        name: \"Full name\",\r\n        error: \"\",\r\n    },\r\n    country: {\r\n        value: \"\",\r\n        rules: \"required\",\r\n        name: \"country\",\r\n        error: \"\",\r\n    },\r\n    state: {\r\n        value: \"\",\r\n        rules: \"required\",\r\n        name: \"state\",\r\n        error: \"\",\r\n    },\r\n    city: {\r\n        value: \"\",\r\n        rules: \"required\",\r\n        name: \"city\",\r\n        error: \"\",\r\n    },\r\n    password: {\r\n        value: \"\",\r\n        rules: \"required | regex: ^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).*$ | min:8\",\r\n        name: \"password\",\r\n        error: \"\",\r\n    },\r\n    confirmPassword: {\r\n        value: \"\",\r\n        rules: \"required\",\r\n        name: \"confirm password\",\r\n        error: \"\",\r\n    },\r\n});\r\nconst confirmationErr = ref(\"\");\r\n\r\nconst updateConfirmation = () => {\r\n    if(formData.value.confirmPassword.value === ''){\r\n        return;\r\n    }else{\r\n        if(formData.value.confirmPassword.value === ''){\r\n            confirmationErr.value = 'The confirm password field is required'\r\n        }else if(formData.value.password.value !== formData.value.confirmPassword.value){\r\n            confirmationErr.value = 'The confirm password confirmation does not match'\r\n        }else{\r\n            confirmationErr.value = ''\r\n        }\r\n    }\r\n}\r\n\r\nconst confirmationPassValidation = () => {\r\n    if(formData.value.confirmPassword.value === ''){\r\n        confirmationErr.value = 'The confirm password field is required'\r\n    }else if(formData.value.password.value !== formData.value.confirmPassword.value){\r\n        confirmationErr.value = 'The confirm password confirmation does not match'\r\n    }else{\r\n        confirmationErr.value = ''\r\n    }\r\n}\r\n\r\nfunction signup() {\r\n    try {\r\n        if(formData.value.password.value !== formData.value.confirmPassword.value){\r\n            confirmationErr.value = 'The confirm password confirmation does not match'\r\n        }\r\n        checkAllFields(formData.value)\r\n        .then((valid) => {\r\n            if(valid && confirmationErr.value === \"\") {\r\n                const axiosObj = {};\r\n                Object.keys(formData.value || {}).forEach((key) => {\r\n                    axiosObj[key] = formData.value[key]?.value;\r\n                });\r\n\r\n                apiRequest.post(`${CREATE_USER}`, axiosObj)\r\n                .then((res) => res.data)\r\n                .then((res) => {\r\n                    if(res.status) {\r\n                        $toast.success(res?.statusText,{position: 'top-right'})\r\n                        router.replace({name: \"Login\"})\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    $toast.error(`Someting went wrong`,{position: 'top-right'})\r\n                    console.error(\"ERROR: \", error);\r\n                })\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            $toast.error(`Someting went wrong`,{position: 'top-right'})\r\n            console.error(\"ERROR: \", error);\r\n        })\r\n    } catch (err) {\r\n        $toast.error(`Someting went wrong`,{position: 'top-right'})\r\n        console.log(\"CATCH ERR: \", err);\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"css\" scoped>\r\n\r\n</style>","import script from \"./Signup.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Signup.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["en","generalErrorMessage","fieldIsRequired","authErrorMessage","emailError","passwordValid","validPassRegex","confirmPasswordValid","validCharacters","minMust","companyErrorMessage","phoneNumberValid","email","password","firstName","lastName","phoneNumber","useValidation","checkErrors","field","name","validations","type","event","Promise","resolve","reject","rules","split","map","x","trim","valid","typeMsg","length","filter","includes","target","value","error","toLowerCase","ind","findIndex","regex","pop","RegExp","test","toString","console","warn","min","Number","max","confirm","checkAllFields","formData","Object","keys","forEach","key","then","res","catch","nextTick","app","App","id","process","router","useRouter","route","useRoute","$toast","useToast","defineComponent","ref","login","credentials","Credentials","emailPassword","logIn","async","query","redirect_url","replace","window","location","reload","push","setTimeout","position","__exports__","userName","country","state","city","confirmPassword","confirmationErr","updateConfirmation","confirmationPassValidation","signup","axiosObj","apiRequest","post","CREATE_USER","data","status","success","statusText","err","log"],"sourceRoot":""}